instance = "default"

max_procs = 2

listen_addr = "0.0.0.0:2003"
pickle_addr = "0.0.0.0:2013"
admin_addr = "0.0.0.0:2004"
http_addr = "0.0.0.0:8081"
spool_dir = "/var/spool/carbon-relay-ng"
pid_file = "/var/run/carbon-relay-ng.pid"
#one of critical error warning notice info debug
log_level = "notice"
#log_level = "debug"
# How long to keep track of invalid metrics seen
# Useful time units are "s", "m", "h"
bad_metrics_max_age = "24h"
# Metric name validation strictness for legacy metrics. Valid values are:
# strict - Block anything that can upset graphite: valid characters are [A-Za-z0-9_-.]; consecutive dots are not allowed
# medium - Valid characters are ASCII; no embedded NULLs
# none   - No validation is performed
validation_level_legacy = "medium"
# Metric validation for carbon2.0 (metrics2.0) metrics.
# Metrics that contain = or _is_ are assumed carbon2.0.
# Valid values are:
# medium - checks for unit and mtype tag, presence of another tag, and constency (use = or _is_, not both)
# none   - No validation is performed
validation_level_m20 = "medium"

# you can also validate that each series has increasing timestamps
validate_order = false

# IMPORTANT: mixes stats from all metrictank environment and instances together and writes them to the same orgId.
# So this only works for dedicated single-org stacks.
# for the counter32, we can't just avg (that would be problematic if they don't wrap at the same time), we can't do min or max either due to unsynchronized wrapping
# so we just pick one of the instances. we use 'max' but actually it will always be a single point.
init = [
     'addAgg max ^metrictank\.stats.*.metrictank-0.tank.metrics_too_old.counter32 metrictank.stats_summary.tank.metrics_too_old.counter32 1 10',
     'addAgg avg ^metrictank\.stats.*.*.api.request_handle.latency.mean.gauge32 metrictank.stats_summary.api.request_handle.render.latency.mean.gauge32 1 10',
     'addAgg avg ^metrictank\.stats.*.*.api.request_handle.latency.p90.gauge32 metrictank.stats_summary.api.request_handle.render.latency.p90.gauge32 1 10',
     'addAgg max ^metrictank\.stats.*.*.api.request_handle.latency.max.gauge32 metrictank.stats_summary.api.request_handle.render.latency.max.gauge32 1 10',
     'addRoute sendAllMatch graphitemon  graphitemon:2003',
     'addRoute kafkaMdm feedback prefix=metrictank.stats_summary  kafka:9092 mdm snappy /conf/storage-schemas.conf byOrg -1',
]

[instrumentation]
# in addition to serving internal metrics via expvar, you can optionally send em to graphite
graphite_addr = "localhost:2003" # feed back into the relay itself
graphite_interval = 1000  # in ms
